// Generated by CoffeeScript 1.3.3
(function() {

  define(function(require, exports) {
    exports.Validators = {
      is_array: function(x) {
        if (Array.isArray) {
          return Array.isArray(x);
        }
        return Object.prototype.toString.call(x) === "[object Array]";
      },
      is_string: function(x) {
        return Object.prototype.toString.call(x) === "[object String]";
      },
      is_number: function(x) {
        var regex;
        if (Object.prototype.toString.call(x) === "[object Number]") {
          return true;
        }
        if (this.is_string(x)) {
          regex = /^\-?[0-9]*\.?[0-9]+$/;
          return regex.test(x);
        }
        return false;
      },
      is_function: function(x) {
        return Object.prototype.toString.call(x) === "[object Function]";
      },
      is_object: function(x) {
        var key;
        if (Object.prototype.toString.call(x) !== "[object Object]") {
          return false;
        }
        for (key in x) {
          break;
        }
        return !key || Object.prototype.hasOwnProperty.call(x, key);
      },
      is_email: function(x) {
        var regex;
        if (this.is_string(x)) {
          regex = /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,6}$/i;
          return regex.test(x);
        }
        return false;
      },
      is_empty: function(x) {
        if (false === this.is_string(x)) {
          x = x.toString();
        }
        if (x === null) {
          return true;
        }
        if (exports.Filters.trim(x) === "") {
          return true;
        }
        return false;
      },
      is_url: function(x) {
        return /((http|https):\/\/(\w+:{0,1}\w*@)?(\S+)|)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/.test(x);
      },
      is_ip: function(x) {
        var ip, octet, quad, regex;
        octet = '(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])';
        ip = '(?:' + octet + '\\.){3}' + octet;
        quad = '(?:\\[' + ip + '\\])|(?:' + ip + ')';
        regex = new RegExp('(' + quad + ')');
        return regex.test(x);
      },
      is_whitespace: function(x) {
        var regex;
        if (false === this.is_string(x)) {
          x = x.toString();
        }
        regex = /^\s*$/;
        return regex.test(x);
      }
    };
    exports.Filters = {
      trim: function(x) {
        var trim_left, trim_right;
        if (false === exports.Validators.is_string(x)) {
          x = x.toString();
        }
        if (String.prototype.trim) {
          return x.trim();
        }
        if (exports.Validators.is_whitespace("\xA0")) {
          trim_left = /^\s+/;
          trim_right = /\s+$/;
        } else {
          trim_left = /^[\s\xA0]+/;
          trim_right = /[\s\xA0]+$/;
        }
        return x.replace(trim_left, "").replace(trim_right, "");
      },
      ucfirst: function(x) {
        return String(x).replace(/\b\w+\b/, function(word) {
          return word.substring(0, 1).toUpperCase() + word.substring(1);
        });
      },
      to_text: function(x) {
        return String(x).replace(/<[^>].*?>/g, "");
      },
      to_number: function(x) {
        if (exports.Validators.is_number(x)) {
          return Number(x);
        }
        return 0;
      }
    };
  });

}).call(this);
