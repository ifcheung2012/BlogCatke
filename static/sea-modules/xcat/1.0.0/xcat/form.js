// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(function(require, exports) {
    var Button, Checkbox, Form, FormElementBase, Hidden, Items, Password, Radio, Select, Submit, Text, Textarea, Validators, jQuery, utils;
    utils = require('./utils');
    jQuery = require('jquery');
    Validators = {
      Email: function(x, msg, callback) {
        var ret;
        msg = msg != null ? msg : '邮箱格式错误';
        ret = utils.Validators.is_email(x);
        if (ret) {
          return callback({
            success: true
          });
        }
        return callback({
          success: false,
          msg: msg
        });
      },
      Required: function(x, msg, callback) {
        var ret;
        msg = msg != null ? msg : '不能为空';
        ret = !utils.Validators.is_empty(x);
        if (ret) {
          return callback({
            success: true
          });
        }
        return callback({
          success: false,
          msg: msg
        });
      },
      IPAddress: function(x, msg, callback) {
        var ret;
        msg = msg != null ? msg : '格式错误';
        ret = utils.Validators.is_ip(x);
        if (ret) {
          return callback({
            success: true
          });
        }
        return callback({
          success: false,
          msg: msg
        });
      },
      URL: function(x, msg, callback) {
        var ret;
        msg = msg != null ? msg : '格式错误';
        ret = utils.Validators.is_url(x);
        if (ret) {
          return callback({
            success: true
          });
        }
        return callback({
          success: false,
          msg: msg
        });
      }
    };
    FormElementBase = (function() {

      function FormElementBase(args) {
        var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        this.args = args;
        this._name = args.name;
        this._label = (_ref = args.label) != null ? _ref : args.name;
        this._filters = (_ref1 = args.filters) != null ? _ref1 : [];
        this._validators = (_ref2 = args.validators) != null ? _ref2 : [];
        this._attr = (_ref3 = args.attr) != null ? _ref3 : {};
        this._tip = (_ref4 = this._attr.tip) != null ? _ref4 : '';
        this._data = (_ref5 = args.data) != null ? _ref5 : [];
        this._error = null;
        this._form = args.form;
        this._type = 'text';
        this._value = null;
        this._dom = false;
        this.init();
      }

      FormElementBase.prototype.init = function() {};

      FormElementBase.prototype.build_dom = function() {
        return "<div class='controls'>                <input type='" + this._type + "' class='input-xlarge' name='" + this._name + "' placeholder='" + this._label + "'>                <span class='help-inline'>" + this._tip + "</span>             </div>            ";
      };

      FormElementBase.prototype.build_wrap = function() {
        return "<div class='control-group'>                <label class='control-label'>" + this._label + "</label>                " + (this.build_dom()) + "             </div>            ";
      };

      FormElementBase.prototype.set_attr = function() {
        var input_dom, k, v, _ref;
        input_dom = this._dom.find("[name=" + this._name + "]");
        _ref = this._attr;
        for (k in _ref) {
          v = _ref[k];
          if (k === 'class') {
            input_dom.addClass(v);
          } else {
            input_dom.attr(k, v);
          }
        }
        return input_dom;
      };

      FormElementBase.prototype.build = function() {
        this._dom = jQuery(this.build_wrap());
        this.set_attr();
        this.set_value(this.args.value);
        return this._dom;
      };

      FormElementBase.prototype.show_error = function(msg) {
        if (this._dom) {
          return this._dom.addClass('error').find('.help-inline').html(msg).show();
        }
      };

      FormElementBase.prototype.hide_error = function() {
        var msg_dom;
        if (this._dom) {
          this._dom.removeClass('error');
          msg_dom = this._dom.find('.help-inline');
          if (utils.Validators.is_empty(this._tip)) {
            return msg_dom.hide();
          } else {
            return msg_dom.html(this._tip).show();
          }
        }
      };

      FormElementBase.prototype.set_value = function(value) {
        var v, _i, _j, _len, _len1, _ref, _ref1;
        if (value !== null) {
          if (this._data.length === 0) {
            _ref = this._filters;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              v = _ref[_i];
              if (utils.Filters.hasOwnProperty(v)) {
                value = utils.Filters[v](value);
              }
            }
            this._value = value;
            if (this._dom) {
              return this._dom.find("[name=" + this._name + "]").val(this._value);
            }
          } else {
            _ref1 = this._data;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              v = _ref1[_j];
              if (value === v) {
                this._value = value;
                if (this._dom) {
                  this._dom.find("[name=" + this._name + "]").val(this._value);
                }
                return;
              }
            }
          }
        }
      };

      FormElementBase.prototype.get_value = function() {
        return this._dom.find("[name=" + this._name + "]").val();
      };

      FormElementBase.prototype.validate = function(callback) {
        var count, pass, v, _i, _j, _len, _len1, _ref, _ref1,
          _this = this;
        this.hide_error();
        count = 0;
        pass = 0;
        _ref = this._validators;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (Validators.hasOwnProperty(v.name)) {
            count = count + 1;
          }
        }
        _ref1 = this._validators;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          v = _ref1[_j];
          if (Validators.hasOwnProperty(v.name)) {
            Validators[v.name](this._value, v.message, function(ret) {
              if (ret.success) {
                pass = pass + 1;
                if (pass === count) {
                  return callback(_this._value);
                }
              } else {
                return _this._form.error(_this, ret.msg);
              }
            });
          }
        }
        if (0 === count) {
          return callback(this._value);
        }
      };

      return FormElementBase;

    })();
    Text = (function(_super) {

      __extends(Text, _super);

      function Text() {
        return Text.__super__.constructor.apply(this, arguments);
      }

      return Text;

    })(FormElementBase);
    Password = (function(_super) {

      __extends(Password, _super);

      function Password() {
        return Password.__super__.constructor.apply(this, arguments);
      }

      Password.prototype.init = function() {
        return this._type = 'password';
      };

      return Password;

    })(FormElementBase);
    Textarea = (function(_super) {

      __extends(Textarea, _super);

      function Textarea() {
        return Textarea.__super__.constructor.apply(this, arguments);
      }

      Textarea.prototype.init = function() {
        return this._type = 'textarea';
      };

      Textarea.prototype.build_dom = function() {
        return "<div class='controls'>                <textarea name='" + this._name + "' rows='3'></textarea>                <span class='help-inline'>" + this._tip + "</span>             </div>            ";
      };

      return Textarea;

    })(FormElementBase);
    Button = (function(_super) {

      __extends(Button, _super);

      function Button() {
        return Button.__super__.constructor.apply(this, arguments);
      }

      Button.prototype.init = function() {
        return this._type = 'button';
      };

      Button.prototype.build_wrap = function() {
        return "<button type='" + this._type + "' name='" + this._name + "' class='btn'>" + this._label + "</button>";
      };

      Button.prototype.validate = function(callback) {
        return callback(this._value);
      };

      return Button;

    })(FormElementBase);
    Submit = (function(_super) {

      __extends(Submit, _super);

      function Submit() {
        return Submit.__super__.constructor.apply(this, arguments);
      }

      Submit.prototype.init = function() {
        return this._type = 'submit';
      };

      Submit.prototype.build_wrap = function() {
        return "<button type='" + this._type + "' name='" + this._name + "' class='btn btn-primary'>" + this._label + "</button>";
      };

      return Submit;

    })(Button);
    Hidden = (function(_super) {

      __extends(Hidden, _super);

      function Hidden() {
        return Hidden.__super__.constructor.apply(this, arguments);
      }

      Hidden.prototype.init = function() {
        return this._type = 'hidden';
      };

      Hidden.prototype.build_wrap = function() {
        return "<span><input type='" + this._type + "' name='" + this._name + "' /></span>";
      };

      return Hidden;

    })(FormElementBase);
    Select = (function(_super) {

      __extends(Select, _super);

      function Select() {
        return Select.__super__.constructor.apply(this, arguments);
      }

      Select.prototype.init = function() {
        return this._type = 'select';
      };

      Select.prototype.build_dom = function() {
        var list, v, _i, _len, _ref;
        list = "";
        _ref = this._data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          list = list + ("<option value='" + v.value + "'>" + v.label + "</option>");
        }
        return "<div class='controls'>                <select name='" + this._name + "'>                    " + list + "                </select>                <span class='help-inline'>" + this._tip + "</span>             </div>            ";
      };

      return Select;

    })(FormElementBase);
    Radio = (function(_super) {

      __extends(Radio, _super);

      function Radio() {
        return Radio.__super__.constructor.apply(this, arguments);
      }

      Radio.prototype.init = function() {
        return this._type = 'radio';
      };

      Radio.prototype.build_dom = function() {
        var list, v, _i, _len, _ref;
        list = "";
        _ref = this._data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          list = list + ("                <label class='checkbox inline'>                    <input type='" + this._type + "' name='" + this._name + "' value='" + this._value + "'> " + this._label + "                 </label>");
        }
        return "<div class='controls'>                " + list + "                <span class='help-inline'>" + this._tip + "</span>             </div>            ";
      };

      Radio.prototype.set_value = function(value) {
        var v, _i, _len, _ref;
        if (!this._dom) {
          return false;
        }
        this._dom.find("[name=" + this._name + "]").attr('checked', false);
        if (value !== null) {
          _ref = this._data;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            if (value.toString() === v.value.toString()) {
              this._value = v.value;
              this._dom.find("[value=" + v.value + "]").attr('checked', true);
              return;
            }
          }
        }
      };

      return Radio;

    })(FormElementBase);
    Checkbox = (function(_super) {

      __extends(Checkbox, _super);

      function Checkbox() {
        return Checkbox.__super__.constructor.apply(this, arguments);
      }

      Checkbox.prototype.init = function() {
        return this._type = 'checkbox';
      };

      Checkbox.prototype.build_dom = function() {
        var list, v, _i, _len, _ref;
        list = "";
        _ref = this._data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          list = list + ("                <label class='checkbox inline'>                    <input type='" + this._type + "' name='" + this._name + "[]' value='" + v.value + "'> " + v.label + "                 </label>");
        }
        return "<div class='controls'>                " + list + "                <span class='help-inline'>" + this._tip + "</span>             </div>            ";
      };

      Checkbox.prototype.set_value = function(value) {
        var v, v2, _i, _len, _ref, _results;
        if (!this._dom) {
          return false;
        }
        this._dom.find("[type=" + this._type + "]").attr('checked', false);
        this._value = [];
        _ref = this._data;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = value.length; _j < _len1; _j++) {
              v2 = value[_j];
              if (v2.toString() === v.value.toString()) {
                this._value.push(v.value);
                _results1.push(this._dom.find("[value=" + v2 + "]").attr('checked', true));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Checkbox.prototype.get_value = function() {
        var value;
        value = [];
        this._dom.find("input[type=" + this._type + "]").each(function() {
          var that;
          that = jQuery(this);
          if (that.attr('checked')) {
            return value.push(that.val());
          }
        });
        return value;
      };

      Checkbox.prototype.validate = function(callback) {
        this.hide_error();
        return callback(this._value);
      };

      return Checkbox;

    })(FormElementBase);
    Items = {
      Text: Text,
      Password: Password,
      Button: Button,
      Submit: Submit,
      Hidden: Hidden,
      Select: Select,
      Radio: Radio,
      Textarea: Textarea,
      Checkbox: Checkbox
    };
    Form = (function() {

      function Form(args) {
        var v, _i, _len, _ref, _ref1, _ref2, _ref3;
        this.action = (_ref = args.action) != null ? _ref : '';
        this.enctype = (_ref1 = args.enctype) != null ? _ref1 : 'multipart/form-data';
        this.method = (_ref2 = args.method) != null ? _ref2 : 'POST';
        this.args = args;
        this._elements = [];
        this._buttons = [];
        this._values = {};
        this._dom = false;
        this._is_pass = false;
        _ref3 = args.elements;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          v = _ref3[_i];
          this.add(v.type, v);
        }
      }

      Form.prototype.error = function(item_obj, msg) {
        return item_obj.show_error(msg);
      };

      Form.prototype.add = function(item, args) {
        args.form = this;
        item = utils.Filters.ucfirst(item);
        if (Items.hasOwnProperty(item)) {
          if (item === 'Button' || item === 'Submit') {
            return this._buttons.push(new Items[item](args));
          } else {
            return this._elements.push(new Items[item](args));
          }
        }
      };

      Form.prototype.submit = function(callback) {
        var _this = this;
        return this._dom.submit(function() {
          _this.validate(function(values) {
            return callback(values);
          });
          return false;
        });
      };

      Form.prototype.build_dom = function() {
        return "<form action='" + this.action + "' enctype='" + this.enctype + "' method='" + this.method + "' />";
      };

      Form.prototype.validate = function(callback) {
        var check, v, _i, _len, _ref, _results,
          _this = this;
        check = 0;
        this._is_pass = false;
        _ref = this._elements;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          v.set_value(v.get_value());
          _results.push(v.validate(function(val) {
            check = check + 1;
            _this._values[v._name] = val;
            if (check === _this._elements.length) {
              _this._is_pass = true;
              return callback(_this._values);
            }
          }));
        }
        return _results;
      };

      Form.prototype.build = function() {
        var button_wrap, v, _i, _j, _len, _len1, _ref, _ref1,
          _this = this;
        this._dom = jQuery(this.build_dom());
        _ref = this._elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          v.build().appendTo(this._dom);
        }
        if (this._buttons.length > 0) {
          button_wrap = jQuery('<div class="form-actions"></div>');
          _ref1 = this._buttons;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            v = _ref1[_j];
            v.build().appendTo(button_wrap);
          }
          button_wrap.appendTo(this._dom);
        }
        this._dom.submit(function() {
          var dom;
          if (false === _this._is_pass) {
            dom = _this._dom;
            _this.validate(function(values) {
              return dom.submit();
            });
          }
          return _this._is_pass;
        });
        return this._dom;
      };

      return Form;

    })();
    return Form;
  });

}).call(this);
